--- runCmorDemo.py	2018-04-10 14:02:25.000000000 +0900
+++ ../work/MRI-JMA-JRA55-do-1-3/runCmorDemo.py	2018-04-05 11:59:24.000000000 +0900
@@ -14,8 +14,6 @@
 # PJD  8 Mar 2018   - Correct prra 'positive'; Added ficeberg2d placeholder
 # PJD  5 Apr 2018   - Update for latest variable list
 #                   TODO: Fix missing_value assignment problem
-#                     ---> Is this going to be fixed by setting missing_value to 1e20 for the inputFile?
-#                          This has been done for JRA55-do-v1.3.1
 
 #%% Create input decks for all variables - 'fileList' will need to be amended to include all files 1958-2018
 inputDict = {}
@@ -190,45 +188,15 @@
 #inputDict['SI3hrPt'][key]['outputUnits'] = '%'
 #inputDict['SI3hrPt'][key]['positive'] = ''
 inputDict['SIday'] = {}
-key = 'siconco'
+key = 'siconc'
 #inputDict['SIday'][key] = {}
 #inputDict['SIday'][key]['fileList'] = [
 #        ''
 #        ]
-#inputDict['SIday'][key]['inputVarName'] = 'siconco'
+#inputDict['SIday'][key]['inputVarName'] = 'siconc'
 #inputDict['SIday'][key]['outputVarName'] = 'siconc'
 #inputDict['SIday'][key]['outputUnits'] = '%'
 #inputDict['SIday'][key]['positive'] = ''
-# fixed in time
-inputDict['Ofx'] = {}
-key = 'areacello'
-#inputDict['Ofx'][key] = {}
-#inputDict['Ofx'][key]['fileList'] = [
-#        'input_suppl/jra55_cell_area.10Apr2018.nc'
-#        ]
-#inputDict['Ofx'][key]['inputVarName'] = 'areacello'
-#inputDict['Ofx'][key]['outputVarName'] = 'areacello'
-#inputDict['Ofx'][key]['outputUnits'] = 'm2'
-#inputDict['Ofx'][key]['positive'] = ''
-key = 'sftof'
-#inputDict['Ofx'][key] = {}
-#inputDict['Ofx'][key]['fileList'] = [
-#        'input_suppl/jra55_mask_sea.10Apr2018.nc'
-#        ]
-#inputDict['Ofx'][key]['inputVarName'] = 'sftof'
-#inputDict['Ofx'][key]['outputVarName'] = 'sftof'
-#inputDict['Ofx'][key]['outputUnits'] = '1'
-#inputDict['Ofx'][key]['positive'] = ''
-inputDict['LIfx'] = {}
-key = 'areacellg'
-#inputDict['LIfx'][key] = {}
-#inputDict['LIfx'][key]['fileList'] = [
-#        'input_suppl/runoff_cell_area.10Apr2018.nc'
-#        ]
-#inputDict['LIfx'][key]['inputVarName'] = 'areacellg'
-#inputDict['LIfx'][key]['outputVarName'] = 'areacellg'
-#inputDict['LIfx'][key]['outputUnits'] = 'm2'
-#inputDict['LIfx'][key]['positive'] = ''
 
 #%% Loop through entries and process file lists
 for key in inputDict.keys():
@@ -263,8 +231,6 @@
             # Get axes
             lat = d.getLatitude()
             lon = d.getLongitude()
-            if var in ['uo','vo']:
-                lev = d.getLevel()
             time = d.getTime() ; # Assumes variable is named 'time', for the demo file this is named 'months'
             #time = d.getAxis(0) ; # Rather use a file dimension-based load
 
@@ -299,10 +265,6 @@
                 timeAx = {'table_entry': 'time1',
                           'units': time.units
                          }
-            elif key == 'SI3hrPt':
-                timeAx = {'table_entry': 'time1',
-                          'units': time.units
-                         }
             elif key == 'OmonC':
                 # Create climatological time axis for the WOA13 (1955-2012) temporal range
                 times = [] ; times_bnds = []
@@ -336,38 +298,6 @@
                           'units': time.units,
                           'coord_vals': time
                          }
-            elif key == 'OyrC':
-                if var in ['uo','vo']:
-                    # Create climatological time axis for the GlobCurrent (Nov1999-Oct2009) temporal range
-                    times = [] ; times_bnds = []
-                    times.append(cdt.componenttime(2004,10,31,12,0,0).torel('days since 1999-11-1').value)
-                    times_bnds.append([cdt.componenttime(1999,11,1,0,0,0).torel('days since 1999-11-1').value,
-                                       cdt.componenttime(2009,11,1,0,0,0).torel('days since 1999-11-1').value])
-                    time = cdm.createAxis(times,np.array(times_bnds),id='time')
-                    time.units = 'days since 1999-11-01 0.0.0'
-                    print times[0]
-                    print times_bnds[0]
-                    print time
-                    timeAx = {'table_entry': 'time2',
-                              'units': time.units,
-                              'coord_vals': time
-                             }
-            elif key == 'LIyrC':
-                if var in ['licalvf']:
-                    # Create climatological time axis for the Depoorter et al. (2013) (Jan2007-Dec2007) temporal range
-                    times = [] ; times_bnds = []
-                    times.append(cdt.componenttime(2007,7,2,12,0,0).torel('days since 2007-1-1').value)
-                    times_bnds.append([cdt.componenttime(2007,1,1,0,0,0).torel('days since 2007-1-1').value,
-                                       cdt.componenttime(2008,1,1,0,0,0).torel('days since 2007-1-1').value])
-                    time = cdm.createAxis(times,np.array(times_bnds),id='time')
-                    time.units = 'days since 2007-01-01 0.0.0'
-                    print times[0]
-                    print times_bnds[0]
-                    print time
-                    timeAx = {'table_entry': 'time2',
-                              'units': time.units,
-                              'coord_vals': time
-                             }
             else:
                 # Use default time entry
                 timeAx = {'table_entry': 'time',
@@ -389,38 +319,6 @@
                               'cell_bounds': lon.getBounds()
                              },
                           ]
-            elif var in ['uo','vo']:
-            # 4D variable - 4 axes
-                axes    = [  timeAx,
-                             {'table_entry': 'depth_coord',
-                              'units': 'm',
-                              'coord_vals': lev[:],
-                              'cell_bounds': lev.getBounds()
-                             },
-                             {'table_entry': 'latitude',
-                              'units': 'degrees_north',
-                              'coord_vals': lat[:],
-                              'cell_bounds': lat.getBounds()
-                             },
-                             {'table_entry': 'longitude',
-                              'units': 'degrees_east',
-                              'coord_vals': lon[:],
-                              'cell_bounds': lon.getBounds()
-                             },
-                          ]
-            elif var in ['areacello','sftof','areacellg']:
-            # 2D variable - 2 axes
-                axes    = [  {'table_entry': 'latitude',
-                              'units': 'degrees_north',
-                              'coord_vals': lat[:],
-                              'cell_bounds': lat.getBounds()
-                             },
-                             {'table_entry': 'longitude',
-                              'units': 'degrees_east',
-                              'coord_vals': lon[:],
-                              'cell_bounds': lon.getBounds()
-                             },
-                          ]
             else:
             # 3D variable - 3 axes
                 axes    = [  timeAx,
@@ -465,14 +363,6 @@
             print 'Start CMOR write..'
             if key == 'OmonC':
                 cmor.write(varid,values) ; # Write variable with time axis
-            elif key == 'OyrC':  
-                cmor.write(varid,values) ; # Write variable with time axis
-            elif key == 'LIyrC':  
-                cmor.write(varid,values) ; # Write variable with time axis
-            elif key == 'Ofx':  
-                cmor.write(varid,values) ; # Write variable without time axis
-            elif key == 'LIfx':  
-                cmor.write(varid,values) ; # Write variable without time axis
             else:
                 cmor.write(varid,values,time_vals=time,time_bnds=time.getBounds()) ; # Write variable with time axis
             print 'End CMOR write..'
